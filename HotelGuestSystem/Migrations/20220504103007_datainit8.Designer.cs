// <auto-generated />
using System;
using HotelGuestSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HotelGuestSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220504103007_datainit8")]
    partial class datainit8
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.16");

            modelBuilder.Entity("HotelGuestSystem.Models.BillItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemName")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BillItems");
                });

            modelBuilder.Entity("HotelGuestSystem.Models.BookingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BookingCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookingEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookingStart")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerFName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerSName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Isactivated")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("HotelGuestSystem.Models.CurrentRatesModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("GDPToEuroRate")
                        .HasColumnType("REAL");

                    b.Property<double>("GDPToUSDRate")
                        .HasColumnType("REAL");

                    b.Property<double>("GDPToYenRate")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("NextUpdate")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("GBPConversionRates");
                });

            modelBuilder.Entity("HotelGuestSystem.Models.RequestModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Delivered")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("requestmade")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("request");
                });

            modelBuilder.Entity("HotelGuestSystem.Models.RoomServiceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Imagepath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RoomServiceItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Toilet Roll",
                            Price = 0.0,
                            ServiceType = "RoomService"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fresh Towels",
                            Price = 0.0,
                            ServiceType = "RoomService"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Change Sheets",
                            Price = 0.0,
                            ServiceType = "RoomService"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "78bf8cbe-1f70-4d6d-890b-247bc57e6150",
                            ConcurrencyStamp = "7b483dfe-e56c-4d5b-97cd-b32652794d29",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ecfbe7ad-bb6b-49e6-ac2b-6359a73fbf02",
                            ConcurrencyStamp = "d4e41d27-8605-4e69-8587-2636ed98e286",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "709a40af-4a4e-40b6-887b-d30dcdf07030",
                            ConcurrencyStamp = "db72e6db-01bf-432b-8675-1d08242bb162",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "27b9af34-a133-43e2-8dd2-aef04ddb2b8c",
                            RoleId = "78bf8cbe-1f70-4d6d-890b-247bc57e6150"
                        },
                        new
                        {
                            UserId = "27b9df34-a133-43e2-8dd2-aef04ddb2b8c",
                            RoleId = "ecfbe7ad-bb6b-49e6-ac2b-6359a73fbf02"
                        },
                        new
                        {
                            UserId = "27b9df37-a133-43e2-8dd2-aef04ddb2b8c",
                            RoleId = "ecfbe7ad-bb6b-49e6-ac2b-6359a73fbf02"
                        },
                        new
                        {
                            UserId = "27b9df47-a133-43e2-8dd2-aef04ddb2b8c",
                            RoleId = "ecfbe7ad-bb6b-49e6-ac2b-6359a73fbf02"
                        },
                        new
                        {
                            UserId = "27b9df32-a133-43e2-8dd2-aef04ddb2b8c",
                            RoleId = "ecfbe7ad-bb6b-49e6-ac2b-6359a73fbf02"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HotelGuestSystem.Models.UserModel", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("Bookingid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferedCurrency")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("UserModel");

                    b.HasData(
                        new
                        {
                            Id = "27b9af34-a133-43e2-8dd2-aef04ddb2b8c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b483dfe-e56c-4d5b-97cd-b32652794d29",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBJ3frR5K24/+MyT0wF75PT0+bYn5pn2GdZFcfItqKq5Yt0WAPTaRijPleQe9jBrWg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b203e000-e6e4-4a59-b759-861d13c6f17b",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com",
                            Bookingid = 0,
                            Fname = "Bob",
                            Sname = "Nobody"
                        },
                        new
                        {
                            Id = "27b9df34-a133-43e2-8dd2-aef04ddb2b8c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b483dfe-e56c-4d5b-97cd-b32652794d29",
                            Email = "Test@Test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@TEST.COM",
                            NormalizedUserName = "TEST@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG3UvDgwXhzd3EX5zFQE08ERNTyOW77XWFxG2SvZSN5ilRVJvbSO5miU/j0NrSz6Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "449dacf2-47af-421e-9be9-6c0c0899bce0",
                            TwoFactorEnabled = false,
                            UserName = "Test@Test.com",
                            Bookingid = 0,
                            Fname = "Yen",
                            PreferedCurrency = "Yen",
                            Sname = "2"
                        },
                        new
                        {
                            Id = "27b9df32-a133-43e2-8dd2-aef04ddb2b8c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b483dfe-e56c-4d5b-97cd-b32652794d29",
                            Email = "Test2@Test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST2@TEST.COM",
                            NormalizedUserName = "TEST2@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELVllTr4FLgSL5BcbrGsSXNMr4c9mZ5B5Yk8+Ws4w6nGUdwf5Rb6rPxGEPiaNyGl2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "50d9ccd0-b7ae-4bad-bb5b-2a50bc3849eb",
                            TwoFactorEnabled = false,
                            UserName = "Test2@Test.com",
                            Bookingid = 0,
                            Fname = "Euro",
                            PreferedCurrency = "EURO",
                            Sname = "2"
                        },
                        new
                        {
                            Id = "27b9df37-a133-43e2-8dd2-aef04ddb2b8c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b483dfe-e56c-4d5b-97cd-b32652794d29",
                            Email = "Test3@Test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST3@TEST.COM",
                            NormalizedUserName = "TEST3@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPcuhvgGX0VnGEZgciggFxHmjC42x6a3Xr3/AK3oca56oFUUyUAEET33xqqBgmzcCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3db85f44-5f2c-46c5-904e-a7dbd2a681cb",
                            TwoFactorEnabled = false,
                            UserName = "Test3@Test.com",
                            Bookingid = 0,
                            Fname = "British",
                            PreferedCurrency = "GBP",
                            Sname = "2"
                        },
                        new
                        {
                            Id = "27b9df47-a133-43e2-8dd2-aef04ddb2b8c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b483dfe-e56c-4d5b-97cd-b32652794d29",
                            Email = "Test4@Test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST4@TEST.COM",
                            NormalizedUserName = "TEST4@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENTO/FNBPMnvg3iJTdPzaasRhvdiJjLogmmrcdqN4QeHSOqRyubmAJ1Y3iCyZ40DNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f25d31ef-7cd7-4b5d-a040-23bb377e79f1",
                            TwoFactorEnabled = false,
                            UserName = "Test4@Test.com",
                            Bookingid = 0,
                            Fname = "USD",
                            PreferedCurrency = "USD",
                            Sname = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
